#-----------------INSTALL ALL CONTAINERS-----------------

#Install all containers
- hosts: all
  user: serveradmin
  become: true
  tasks:
    # Copy config for Sabnzbd
    - name: Copy sabnzbd config
      shell: cp /home/serveradmin/docker/shared/remoteESXi/usenet_linux_config_files/sabnzbd/sabnzbd.ini /home/serveradmin/docker/sabnzbd/

#Fix folder permissions for SABnzbd
    - name: Set group ownership of the sabnzbd directory
      shell: chown -R :1000 /home/serveradmin/docker/sabnzbd

    - name: Change permissions on the directory to give full access to members of the group
      shell: chmod -R 775 /home/serveradmin/docker/sabnzbd
 
    - name: Ensure all future content in the folder will inherit group ownership
      shell: chmod g+s /home/serveradmin/docker/sabnzbd
   
#Fix file permissions for SABnzbd config file
    - name: Set group ownership of the sabnzbd config file
      ansible.builtin.file:
        path: /home/serveradmin/docker/sabnzbd/sabnzbd.ini
        owner: serveradmin
        group: serveradmin
        mode: 0755
   
    - name: Create sabnzbd container
      docker_container:
        name: sabnzbd
        image: ghcr.io/linuxserver/sabnzbd:latest
        state: started
        recreate: yes
        restart_policy: unless-stopped
        env:
          TZ: "Europe/Stockholm"
          PUID: "1000"
          GUID: "1000"
        published_ports:
          - "8080:8080"
          - "9090:9090"
        volumes:
          - /home/serveradmin/docker/sabnzbd:/config
          - /home/serveradmin/docker/shared/DockerCompletedMovies:/DockerCompletedMovies
          - /home/serveradmin/docker/shared/DockerCompletedTVshows:/DockerCompletedTVshows
          - /home/serveradmin/docker/shared/remotemovies:/remotemovies

    - name: Create sonarr container
      docker_container:
        name: sonarr
        image: ghcr.io/linuxserver/sonarr:latest
        state: started
        recreate: yes
        restart_policy: unless-stopped
        env:
          TZ: "Europe/Stockholm"
          PUID: "1000"
          GUID: "1000"
        published_ports:
          - "8989:8989"
        volumes:
          - /home/serveradmin/docker/sonarr:/config
          - /home/serveradmin/docker/shared/remotetvshows:/remotetvshows
          - /home/serveradmin/docker/shared/DockerCompletedTVshows:/complete
          - /home/serveradmin/docker/shared/remoteESXi:/backups

    - name: Create radarr container
      docker_container:
        name: radarr
        image: ghcr.io/linuxserver/radarr:latest
        state: started
        recreate: yes
        restart_policy: unless-stopped
        env:
          TZ: "Europe/Stockholm"
          PUID: "1000"
          GUID: "1000"
        published_ports:
          - "7878:7878"
        volumes:
          - /home/serveradmin/docker/radarr:/config
          - /home/serveradmin/docker/shared/remotemovies:/remotemovies
          - /home/serveradmin/docker/shared/DockerCompletedMovies:/complete
          - /home/serveradmin/docker/shared/remoteESXi:/backups

    - name: Create watchtower container
      docker_container:
        name: watchtower
        image: containrrr/watchtower:latest
        state: started
        recreate: yes
        restart_policy: unless-stopped
        env:
          TZ: "Europe/Stockholm"
          WATCHTOWER_CLEANUP: "true"
          WATCHTOWER_SCHEDULE: "0 0 4 * * *" # Checks for updates at 4 in the morning every day
          WATCHTOWER_NOTIFICATIONS: "shoutrrr"
          WATCHTOWER_NOTIFICATION_URL: "pushover://shoutrrr:a8m7qgce2rs6nptj7fzp3o7bmzqmcr@udk9spjabtaphjphz8ddxcftqbnaie/?devices= iPhone_X"
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          
    - name: Create plex container
      docker_container:
        name: plex
        image: ghcr.io/linuxserver/plex:latest
        network_mode: host
        state: started
        recreate: yes
        restart_policy: unless-stopped
        env:
          TZ: "Europe/Stockholm"
          PUID: "1000"
          GUID: "1000"
          VERSION: "docker"
        volumes:
          - /home/serveradmin/docker/plex:/config
          - /home/serveradmin/docker/plex/temp:/transcode
          - /home/serveradmin/docker/shared/remotetvshows:/tv
          - /home/serveradmin/docker/shared/remotemovies:/movies
          - /home/serveradmin/docker/shared/remotekidsmovies:/kidsmovies
          - /home/serveradmin/docker/shared/remoteESXi/usenet_linux_config_files/plex:/backups

  # Stop Plex container to copy the metadata from the backup location
    - name: Stop plex container
      shell: docker stop plex

  # Delete fresh plex files
    - name: Delete plex 'Media' folder to replace with backup
      shell: rm -rf /home/serveradmin/docker/plex/Library/Application\ Support/Plex\ Media\ Server/Media

    - name: Delete plex 'Plug-ins' folder to replace with backup
      shell: rm -rf /home/serveradmin/docker/plex/Library/Application\ Support/Plex\ Media\ Server/Plug-ins

    - name: Delete plex 'Plug-in Support' folder to replace with backup
      shell: rm -rf /home/serveradmin/docker/plex/Library/Application\ Support/Plex\ Media\ Server/Plug-in\ Support
 
    - name: Delete plex 'Metadata' folder to replace with backup
      shell: rm -rf /home/serveradmin/docker/plex/Library/Application\ Support/Plex\ Media\ Server/Metadata
     
   # Copy the backed up files from the NAS to the local folder, setting the permissions      
    - name: Copy plex 'Media' files from NAS
      shell: cp -R /home/serveradmin/docker/shared/remoteESXi/usenet_linux_config_files/plex/Media/ /home/serveradmin/docker/plex/Library/Application\ Support/Plex\ Media\ Server/Media

    - name: Copy plex 'Plug-ins' files from NAS
      shell: cp -r /home/serveradmin/docker/shared/remoteESXi/usenet_linux_config_files/plex/Plug-ins/ /home/serveradmin/docker/plex/Library/Application\ Support/Plex\ Media\ Server/Plug-ins

    - name: Copy plex 'Plug-in Support' files from NAS
      shell: cp -r /home/serveradmin/docker/shared/remoteESXi/usenet_linux_config_files/plex/Plug-in\ Support/ /home/serveradmin/docker/plex/Library/Application\ Support/Plex\ Media\ Server/Plug-in\ Support

    - name: Copy plex 'Metadata' files from NAS
      shell: cp -r /home/serveradmin/docker/shared/remoteESXi/usenet_linux_config_files/plex/Metadata/ /home/serveradmin/docker/plex/Library/Application\ Support/Plex\ Media\ Server/Metadata
    
    - name: Copy plex backup script files from NAS
      shell: cp /home/serveradmin/docker/shared/remoteESXi/usenet_linux_config_files/plex/plex_backup.sh /home/serveradmin/docker/

   # Fix folder permissions for copied plex files
    - name: Set group ownership of the plex directory
      shell: chown -R :1000 /home/serveradmin/docker/plex/Library/Application\ Support/Plex\ Media\ Server/

    - name: Change permissions on the directory to give full access to members of the group
      shell: chmod -R 775 /home/serveradmin/docker/plex/Library/Application\ Support/Plex\ Media\ Server/
 
    - name: Ensure all future content in the folder will inherit group ownership
      shell: chmod g+s /home/serveradmin/docker/plex/Library/Application\ Support/Plex\ Media\ Server/
      
    # Make plex backup script executable
    - name: Make plex backup script executable
      shell: chmod 774 /home/serveradmin/docker/plex_backup.sh

    # Restart the plex container which will now have all data restored
    - name: Start plex container
      shell: docker start plex

      # Add cronjob to rsync all new data to plex backup folder on NAS
 #   - name: Add cronjob to backup plex to NAS at 5 AM everyday
 #     shell: (crontab -l 2>/dev/null; echo "0 5 * * * rsync -aPhi --delete /home/serveradmin/docker/plex/Library/Application\ Support/Plex\ Media\ Server/ /home/serveradmin/docker/shared/remoteESXi/usenet_linux_config_files/plex/") | crontab -

    # Add cronjob to rsync all new data to plex backup folder on NAS
    - name: Add cronjob to backup plex to NAS at 3 AM everyday
      shell: (crontab -l 2>/dev/null; echo "0 3 * * * /home/serveradmin/docker/plex_backup.sh") | crontab -
