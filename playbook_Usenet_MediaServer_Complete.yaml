#-----------------SETUP FOLDER STRUCTURE-----------------
- hosts: all
  user: serveradmin
  become: true
  vars:
    docker_compose_version: "1.28.5"
  tasks:
    - name: create directories
      file:
       path: "{{ item }}"
       state: directory
       owner: "serveradmin"
       group: "serveradmin"
       mode: "u=rwx,g=rwx,o=rx,g+s" #make serveradmin user and group own the files and folders, 02 in the beginning corresponds to chmod g+s
      loop:
       - /home/serveradmin/docker/shared/DockerCompletedMovies
       - /home/serveradmin/docker/shared/DockerCompletedTVshows
       - /home/serveradmin/docker/shared/remotemovies
       - /home/serveradmin/docker/shared/remotekidsmovies
       - /home/serveradmin/docker/shared/remotetvshows
       - /home/serveradmin/docker/shared/remoteESXi
       - /home/serveradmin/docker/plex
       - /home/serveradmin/docker/sonarr
       - /home/serveradmin/docker/radarr
       - /home/serveradmin/docker/sabnzbd

#Fix folder permissions for SABnzbd
    - name: Set group ownership of the sabnzbd directory
      shell: chown -R :1000 /home/serveradmin/docker/sabnzbd

    - name: Change permissions on the directory to give full access to members of the group
      shell: chmod -R 775 /home/serveradmin/docker/sabnzbd
 
    - name: Ensure all future content in the folder will inherit group ownership
      shell: chmod g+s /home/serveradmin/docker/sabnzbd

#Fix folder permissions for Sonarr
    - name: Set group ownership of the sonarr directory
      shell: chown -R :1000 /home/serveradmin/docker/sonarr

    - name: Change permissions on the directory to give full access to members of the group
      shell: chmod -R 775 /home/serveradmin/docker/sonarr
 
    - name: Ensure all future content in the folder will inherit group ownership
      shell: chmod g+s /home/serveradmin/docker/sonarr

#Fix folder permissions for Radarr
    - name: Set group ownership of the radarr directory
      shell: chown -R :1000 /home/serveradmin/docker/radarr

    - name: Change permissions on the directory to give full access to members of the group
      shell: chmod -R 775 /home/serveradmin/docker/radarr
 
    - name: Ensure all future content in the folder will inherit group ownership
      shell: chmod g+s /home/serveradmin/docker/radarr

#Fix folder permissions for Plex
    - name: Set group ownership of the plex directory
      shell: chown -R :1000 /home/serveradmin/docker/plex

    - name: Change permissions on the directory to give full access to members of the group
      shell: chmod -R 775 /home/serveradmin/docker/plex
 
    - name: Ensure all future content in the folder will inherit group ownership
      shell: chmod g+s /home/serveradmin/docker/plex


#-----------------INSTALL AND MOUNT NFS & SAMBA SHARES-----------------

- hosts: all
  user: serveradmin
  become: true
  tasks:
    # UPGRADE AND INSTALL REQUIRED UBUNTU PACKAGES
    - name: Update apt cache
      apt: update_cache=yes cache_valid_time=3600

#    - name: Upgrade all apt packages
#      apt: upgrade=dist
    
    # REQUIRED PACKAGES FOR USING ANSIBLE (for NFS installation)
    - name: Install related Ubuntu packages
      apt:
        name: "{{ packages }}"
        state: latest
      vars:
        packages:
          - nfs-common
    
    # MOUNT SHARES
    - name: Mount NFS share for movies
      shell: echo "192.168.0.208:/volume1/Filmer /home/serveradmin/docker/shared/remotemovies nfs nfsvers=3,rsize=8192,wsize=8192,timeo=14,intr" >> /etc/fstab
    
    - name: Mount NFS share for kids movies
      shell: echo "192.168.0.208:/volume1/Barnfilmer /home/serveradmin/docker/shared/remotekidsmovies nfs nfsvers=3,rsize=8192,wsize=8192,timeo=14,intr" >> /etc/fstab
    
    - name: Mount NFS share for tvshows
      shell: echo "192.168.0.208:/volume1/TV /home/serveradmin/docker/shared/remotetvshows nfs nfsvers=3,rsize=8192,wsize=8192,timeo=14,intr" >> /etc/fstab
   
    - name: Mount NFS share for ESXi
      shell: echo "192.168.0.208:/volume1/ESXi /home/serveradmin/docker/shared/remoteESXi nfs nfsvers=3,rsize=8192,wsize=8192,timeo=14,intr" >> /etc/fstab

    # Manually mount the shares
    - name: Manually mount NFS shares
      shell: mount -a

    # CONFIGURE SAMBA USER
    - name: Configure Samba users.
      shell: >
        (pdbedit --user=serveradmin 2>&1 > /dev/null)
        || (echo ''; echo '')
        | smbpasswd -s -a serveradmin
      register: smbpasswd
      changed_when: "'Added user' in smbpasswd.stdout"
      loop_control:
        label: "{{ serveradmin }}"

    # ADD HOME FOLDERS TO SAMBA SHARE
    - name: Add home folders to Samba share
      blockinfile:
        path: /etc/samba/smb.conf
        block: |
          [homes]
            comment = Home Directories
            browseable = yes
            read only = no
            create mask = 0700
            directory mask = 0700
            valid users = %S
 
    - name: Restart SAMBA service
      shell: systemctl restart smbd

#-----------------INSTALL DOCKER & PORTAINER-----------------

- hosts: all
  user: serveradmin
  become: yes
  vars:
    docker_compose_version: "1.28.5"
  tasks:
    # UPGRADE AND INSTALL REQUIRED UBUNTU PACKAGES
    - name: Update apt cache
      apt: update_cache=yes cache_valid_time=3600

 #   - name: Upgrade all apt packages
 #     apt: upgrade=dist

    - name: Install dependencies
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - gnupg-agent

    # DOCKER INSTALLATION
    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install Docker
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - docker-ce
          - docker-ce-cli
          - containerd.io

    - name: Add user to docker group
      user:
        name: "{{ansible_user}}"
        group: docker

    - name: Download docker-compose {{ docker_compose_version }}
      get_url:
        url: https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-Linux-x86_64
        dest: ~/docker-compose
        mode: "+x"

    - name: Check docker-compose exists
      stat: path=~/docker-compose
      register: docker_compose

    - name: Move docker-compose to /usr/local/bin/docker-compose
      command: mv ~/docker-compose /usr/local/bin/docker-compose
      when: docker_compose.stat.exists

    # REQUIRED PACKAGES FOR USING ANSIBLE DOCKER (for portainer installation below)
    - name: Install related Ubuntu packages
      apt:
        name: "{{ packages }}"
        state: latest
      vars:
        packages:
          - python3-pip
          - mc

    - name: Install python packages
      pip:
        name: docker

    # https://docs.ansible.com/ansible/latest/collections/community/docker/docker_container_module.html#ansible-collections-community-docker-docker-container-module
    - name: Create portainer container
      docker_container:
        name: portainer
        image: portainer/portainer-ce
        state: started
        recreate: yes
        restart_policy: always
        published_ports:
          - "8000:8000"
          - "9000:9000"
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - portainer_data:/data

#-----------------INSTALL ALL CONTAINERS-----------------

#Install all containers
- hosts: all
  user: serveradmin
  become: true
  tasks:
    # Copy config for Sabnzbd
    - name: Copy sabnzbd config
      shell: cp /home/serveradmin/docker/shared/remoteESXi/usenet_linux_config_files/sabnzbd/sabnzbd.ini /home/serveradmin/docker/sabnzbd/

#Fix folder permissions for SABnzbd
    - name: Set group ownership of the sabnzbd directory
      shell: chown -R :1000 /home/serveradmin/docker/sabnzbd

    - name: Change permissions on the directory to give full access to members of the group
      shell: chmod -R 775 /home/serveradmin/docker/sabnzbd
 
    - name: Ensure all future content in the folder will inherit group ownership
      shell: chmod g+s /home/serveradmin/docker/sabnzbd
   
#Fix file permissions for SABnzbd config file
    - name: Set group ownership of the sabnzbd config file
      ansible.builtin.file:
        path: /home/serveradmin/docker/sabnzbd/sabnzbd.ini
        owner: serveradmin
        group: serveradmin
        mode: 0755
   
    - name: Create sabnzbd container
      docker_container:
        name: sabnzbd
        image: ghcr.io/linuxserver/sabnzbd:latest
        state: started
        recreate: yes
        restart_policy: unless-stopped
        env:
          TZ: "Europe/Stockholm"
          PUID: "1000"
          GUID: "1000"
        published_ports:
          - "8080:8080"
          - "9090:9090"
        volumes:
          - /home/serveradmin/docker/sabnzbd:/config
          - /home/serveradmin/docker/shared/DockerCompletedMovies:/DockerCompletedMovies
          - /home/serveradmin/docker/shared/DockerCompletedTVshows:/DockerCompletedTVshows
          - /home/serveradmin/docker/shared/remotemovies:/remotemovies

    - name: Create sonarr container
      docker_container:
        name: sonarr
        image: ghcr.io/linuxserver/sonarr:latest
        state: started
        recreate: yes
        restart_policy: unless-stopped
        env:
          TZ: "Europe/Stockholm"
          PUID: "1000"
          GUID: "1000"
        published_ports:
          - "8989:8989"
        volumes:
          - /home/serveradmin/docker/sonarr:/config
          - /home/serveradmin/docker/shared/remotetvshows:/remotetvshows
          - /home/serveradmin/docker/shared/DockerCompletedTVshows:/complete
          - /home/serveradmin/docker/shared/remoteESXi:/backups

    - name: Create radarr container
      docker_container:
        name: radarr
        image: ghcr.io/linuxserver/radarr:latest
        state: started
        recreate: yes
        restart_policy: unless-stopped
        env:
          TZ: "Europe/Stockholm"
          PUID: "1000"
          GUID: "1000"
        published_ports:
          - "7878:7878"
        volumes:
          - /home/serveradmin/docker/radarr:/config
          - /home/serveradmin/docker/shared/remotemovies:/remotemovies
          - /home/serveradmin/docker/shared/DockerCompletedMovies:/complete
          - /home/serveradmin/docker/shared/remoteESXi:/backups

    - name: Create watchtower container
      docker_container:
        name: watchtower
        image: containrrr/watchtower:latest
        state: started
        recreate: yes
        restart_policy: unless-stopped
        env:
          TZ: "Europe/Stockholm"
          WATCHTOWER_CLEANUP: "true"
          WATCHTOWER_SCHEDULE: "0 0 4 * * *" # Checks for updates at 4 in the morning every day
          WATCHTOWER_NOTIFICATIONS: "shoutrrr"
          WATCHTOWER_NOTIFICATION_URL: "pushover://shoutrrr:a8m7qgce2rs6nptj7fzp3o7bmzqmcr@udk9spjabtaphjphz8ddxcftqbnaie/?devices= iPhone_X"
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          
    - name: Create plex container
      docker_container:
        name: plex
        image: ghcr.io/linuxserver/plex:latest
        network_mode: host
        state: started
        recreate: yes
        restart_policy: unless-stopped
        env:
          TZ: "Europe/Stockholm"
          PUID: "1000"
          GUID: "1000"
          VERSION: "docker"
        volumes:
          - /home/serveradmin/docker/plex:/config
          - /home/serveradmin/docker/plex/temp:/transcode
          - /home/serveradmin/docker/shared/remotetvshows:/tv
          - /home/serveradmin/docker/shared/remotemovies:/movies
          - /home/serveradmin/docker/shared/remotekidsmovies:/kidsmovies
          - /home/serveradmin/docker/shared/remoteESXi/usenet_linux_config_files/plex:/backups

  # Stop Plex container to copy the metadata from the backup location
    - name: Stop plex container
      shell: docker stop plex

  # Copy the backed up files from the NAS to the local folder, setting the permissions
    - name: Restore Plex backup from NAS
      copy:
        src: /home/serveradmin/docker/shared/remoteESXi/usenet_linux_config_files/plex/
        dest: /home/serveradmin/docker/plex/Library/Application\ Support/Plex\ Media\ Server/
        mode: 0775
      
    # Restart the plex container which will now have all data restored
    - name: Start plex container
      shell: docker start plex

      # Add cronjob to rsync all new data to plex backup folder on NAS
    - name: Add cronjob to backup plex to NAS at 5 AM everyday
      shell: (crontab -l 2>/dev/null; echo "0 5 * * * rsync -aPhi --delete /home/serveradmin/docker/plex/Library/Application\ Support/Plex\ Media\ Server/ /home/serveradmin/docker/shared/remoteESXi/usenet_linux_config_files/plex/") | crontab -

################# FINISHED! #######################

